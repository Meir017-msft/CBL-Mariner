parameters:
- name: publishingLevel
  type: string
- name: agentPool
  type: object
- name: selfRepoName
  type: string
- name: selfRepoRoot
  type: string

stages:
- stage: publish_containers_stage
  displayName: 'Publish Containers'
  jobs:
  - job: validation_job
    timeoutInMinutes: 20
    displayName: Validate Inputs
    pool: ${{ parameters.agentPool }}

    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)
      ob_artifactBaseName: validation_artifacts
      amd64ArtifactsDownloadDir: $(Build.Repository.LocalPath)/downloaded-artifacts/AMD64
      arm64ArtifactsDownloadDir: $(Build.Repository.LocalPath)/downloaded-artifacts/ARM64
      buildNumberConfig: build-number.config
      githubBranchConfig: github_branch.config

    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download $(buildConfigDir) - AMD64'
      inputs:
        buildType: specific
        project: mariner
        definition: $(amd64ContainersPipelineId)
        buildVersionToDownload: specific
        pipelineId: $(amd64ContainersBuildId)
        artifactName: $(configArtifactName)
        itemPattern: $(buildConfigDir)/*
        targetPath: $(amd64ArtifactsDownloadDir)

    - task: DownloadPipelineArtifact@2
      displayName: 'Download $(buildConfigDir) - ARM64'
      inputs:
        buildType: specific
        project: mariner
        definition: $(arm64ContainersPipelineId)
        buildVersionToDownload: specific
        pipelineId: $(arm64ContainersBuildId)
        artifactName: $(configArtifactName)
        itemPattern: $(buildConfigDir)/*
        targetPath: $(arm64ArtifactsDownloadDir)

    - task: Bash@3
      displayName: 'Validate Build Numbers'
      inputs:
        targetType: 'inline'
        script: |
          AMD64_BUILD_NUMBER=$(cat "$(amd64ArtifactsDownloadDir)/$(buildConfigDir)/$(buildNumberConfig)")
          ARM64_BUILD_NUMBER=$(cat "$(arm64ArtifactsDownloadDir)/$(buildConfigDir)/$(buildNumberConfig)")
          if [[ $AMD64_BUILD_NUMBER != $ARM64_BUILD_NUMBER ]]; then
            echo "##vso[task.logissue type=error;]Build numbers do not match"
            exit 1
          fi

          echo "##vso[build.updatebuildnumber]$AMD64_BUILD_NUMBER"

    - task: Bash@3
      displayName: 'Validate Publishing Level Selection'
      inputs:
        targetType: 'inline'
        script: |
          echo "Validate that the publishing level selected is aligned with the branch name for given build IDs."
          BRANCH_NAME=$(cat "$(amd64ArtifactsDownloadDir)/$(buildConfigDir)/$(githubBranchConfig)")
          echo "Branch Name           -> $BRANCH_NAME"
          echo "Publishing Level      -> ${{ parameters.publishingLevel }}"

          if [[ ${{ parameters.publishingLevel }} == "Production" ]]; then
            if ! [[ "$BRANCH_NAME" =~ ^(2.0|3.0)$ ]]; then
              echo "##vso[task.logissue type=error;]Production publishing is only allowed from official release branches."
              exit 1
            fi
          elif [[ ${{ parameters.publishingLevel }} == "Development" ]]; then
            if [[ "$BRANCH_NAME" =~ ^(2.0|3.0)$ ]]; then
              echo "##vso[task.logissue type=error;]Development publishing is not allowed from official release branches."
              exit 1
            fi
          fi

    - task: Bash@3
      name: set_out_variables
      displayName: 'Set out variables'
      inputs:
        targetType: 'inline'
        script: |
          BRANCH_NAME=$(cat "$(amd64ArtifactsDownloadDir)/$(buildConfigDir)/$(githubBranchConfig)")
          if ! [[ "$BRANCH_NAME" =~ ^(main|2.0|3.0|3.0-dev)$ ]]; then
            echo "Original Branch Name  -> $BRANCH_NAME"
            BRANCH_NAME="topic"
            echo "Modified Branch Name  -> $BRANCH_NAME"
          fi
          echo "Set variable 'github_branch' with value '$BRANCH_NAME'."
          echo "##vso[task.setvariable variable=github_branch;isoutput=true]$BRANCH_NAME"

  - job: publish_containers_job
    dependsOn: validation_job
    timeoutInMinutes: 120
    displayName: Publish Containers
    pool: ${{ parameters.agentPool }}

    variables:
      ob_outputDirectory: $(Build.ArtifactStagingDirectory)
      ob_artifactBaseName: publish_job_artifacts
      containersSrcDirectory: ${{ parameters.selfRepoRoot }}/.pipelines/containerSourceData
      amd64ArtifactsDownloadDir: $(Build.Repository.LocalPath)/downloaded-artifacts/AMD64
      arm64ArtifactsDownloadDir: $(Build.Repository.LocalPath)/downloaded-artifacts/ARM64
      branchName: $[ dependencies.validation_job.outputs['set_out_variables.github_branch'] ]
      ${{ if eq(parameters.publishingLevel, 'Production') }}:
        securityConfigArgument: '--prodConfig'

    steps:
    - checkout: ${{ parameters.selfRepoName }}
      lfs: false

    - task: PipAuthenticate@1
      displayName: Provision - Authenticate Pip
      inputs:
        artifactFeeds: 'mariner/Mariner-Pypi-Feed'

    - task: Bash@3
      displayName: 'Set security config'
      inputs:
        filePath: $(Build.SourcesDirectory)/pipelines/configurations/apply-security-config.sh
        arguments: $(securityConfigArgument)

    - task: Bash@3
      displayName: 'Configure 1ES machine'
      inputs:
        filePath: $(Build.SourcesDirectory)/.pipelines/Configure-1ES.sh

    - task: DownloadPipelineArtifact@2
      displayName: 'Download $(containerArtifactDir) - AMD64'
      inputs:
        buildType: specific
        project: mariner
        definition: $(amd64ContainersPipelineId)
        buildVersionToDownload: specific
        pipelineId: $(amd64ContainersBuildId)
        artifactName: $(containersArtifactName)
        itemPattern: $(containerArtifactDir)/$(containerFilesPrefix)*$(containerFilesSuffix)
        targetPath: $(amd64ArtifactsDownloadDir)

    # This task's downloaded artifacts are not used.
    # It is just to implicitly validate that the corresponding ARM64 containers exist.
    # Some containers are only produced for AMD64 architecture.
    # Therefore, we can continue on error but would still like to direct attention to this task's failure.
    - task: DownloadPipelineArtifact@2
      displayName: 'Download $(containerArtifactDir) - ARM64'
      continueOnError: True
      inputs:
        buildType: specific
        project: mariner
        definition: $(arm64ContainersPipelineId)
        buildVersionToDownload: specific
        pipelineId: $(arm64ContainersBuildId)
        artifactName: $(containersArtifactName)
        itemPattern: $(containerArtifactDir)/$(containerFilesPrefix)*$(containerFilesSuffix)
        targetPath: $(arm64ArtifactsDownloadDir)

    - task: Bash@3
      displayName: 'Publish Containers'
      inputs:
        filePath: $(containersSrcDirectory)/scripts/PublishContainers.sh
        arguments: '-c "$(containersSrcDirectory)"
                    -d "$(amd64ArtifactsDownloadDir)/$(containerArtifactDir)"
                    -e "$(containerFilesPrefix)"
                    -f "$(containerFilesSuffix)"
                    -g "$(branchName)"
                    -p "${{ lower(parameters.publishingLevel) }}"
                    -o "$(ob_outputDirectory)"'
